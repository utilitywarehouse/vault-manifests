apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
---
# Placeholder to be patched by the initializer
apiVersion: v1
kind: Secret
metadata:
  name: vault
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  labels:
    app: vault
spec:
  clusterIP: None
  selector:
    app: vault
  ports:
    - port: 8200
      name: public-api
    - port: 8201
      name: members-internal-api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
spec:
  serviceName: vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /__/metrics
        prometheus.io/port: '8080'
    spec:
      serviceAccountName: vault
      shareProcessNamespace: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - vault
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
      initContainers:
        # Install ca cert as a root CA
        - name: ca
          image: alpine
          command:
            - sh
            - -c
            - |
              set -e
              apk add --update ca-certificates
              cp /etc/tls/ca.crt /usr/local/share/ca-certificates/vault-ca.crt
              update-ca-certificates
              cp /etc/ssl/certs/* /ssl-certs
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /ssl-certs
        # Write vautl config to file
        - name: vault-config
          image: alpine
          command:
            - sh
            - -c
            - echo "$VAULT_CONFIG" > /vault/config/config.hcl
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_CONFIG
              value: |
                listener "tcp" {
                  address         = "0.0.0.0:8200"
                  cluster_address = "0.0.0.0:8201"
                  tls_key_file    = "/etc/tls/tls.key"
                  tls_cert_file   = "/etc/tls/tls.crt"
                }

                storage "raft" {
                  path    = "/vault/storage"
                  node_id = "$(POD_NAME)"
                }

                telemetry {
                  prometheus_retention_time = "90s",
                  disable_hostname = true
                }

                api_addr      = "https://$(POD_NAME).vault.$(POD_NAMESPACE):8200"
                cluster_addr  = "https://$(POD_NAME).vault.$(POD_NAMESPACE):8201"
                disable_mlock = true
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
        # Write nginx config to file
        - name: nginx-config
          image: alpine
          command:
            - sh
            - -c
            - |
              VAULT_TOKEN="${VAULT_TOKEN:-"000000000000000"}";
              echo "${NGINX_CONFIG}" | sed 's/%VAULT_TOKEN%/'"${VAULT_TOKEN}"'/g' > /etc/nginx/conf.d/default.conf;
          env:
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault
                  key: root-token
                  optional: true
            - name: NGINX_CONFIG
              value: |
                  server {
                      listen       8080;
                      server_name  localhost;

                      location /__/metrics {
                          proxy_pass https://127.0.0.1:8200/v1/sys/metrics?format=prometheus;
                          proxy_set_header X-Vault-Token %VAULT_TOKEN%;
                          proxy_ssl_verify off;
                      }
                  }
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
      containers:
        - name: initializer
          image: alpine
          command:
            - /bin/sh
            - -c
            - |
              # Only run the initializer in the first replica
              replica="${HOSTNAME: -1}";
              if [ "${replica}" != "0" ];then
                echo "this replica is not responsible for initialization, going to sleep";
                while true; do sleep 86400; done
              fi

              # Validations and defaults
              : ${VAULT_CACERT:?"Need to set VAULT_CACERT"};
              apk -q add curl jq;
              vault_name="${VAULT_ADDR:-"vault"}";
              kubectl_version="${KUBECTL_VERSION:-"$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"}";
              leader_addr="https://${vault_name}-0.${vault_name}:8200";
              replicas="${VAULT_REPLICAS:-"3"}";

              # Wait for vault api and check if initialization is needed
              until curl -s --cacert "${VAULT_CACERT}" "${leader_addr}/v1/sys/init"; do
                echo 'leader not ready, sleeping for 3 seconds';
                sleep 3;
              done;
              initialized=$(curl -s --cacert "${VAULT_CACERT}" "${leader_addr}/v1/sys/init" | jq '.initialized');
              if [ "${initialized}" = "true" ];then
                echo "vault is already initialized, going to sleep";
                while true; do sleep 86400; done
              fi

              # Install kubectl
              curl -sLO "https://storage.googleapis.com/kubernetes-release/release/${kubectl_version}/bin/linux/amd64/kubectl";
              chmod +x ./kubectl;
              mv ./kubectl /usr/local/bin;

              # Initialize vault and update secret
              init=$(curl -s --cacert "${VAULT_CACERT}" "${leader_addr}/v1/sys/init" \
                -XPUT -d '{"secret_shares":1,"secret_threshold": 1}');
              token=$(echo "${init}" | jq -r '.root_token');
              unseal_key=$(echo "${init}" | jq -r '.keys[0]');
              kubectl patch secret vault -p '{"stringData":{"unseal-key":"'"${unseal_key}"'","root-token":"'"${token}"'"}}'
              echo "vault initialized"

              # Unseal leader
              curl -s --cacert "${VAULT_CACERT}" "${leader_addr}/v1/sys/unseal" -XPUT -d '{"key":"'"${unseal_key}"'"}'
              echo "leader unsealed"

              # Wait for replicas api and join and unseal them
              join_replica()
              {
                replica_number="$1";
                replica_name="${vault_name}-${replica_number}";
                replica_addr="https://${replica_name}.${vault_name}:8200";
                until curl -s --cacert "${VAULT_CACERT}" "${replica_addr}/v1/sys/init"; do
                  echo "${replica_name} not ready, sleeping for 3 seconds";
                  sleep 3;
                done;

                curl -s --cacert "${VAULT_CACERT}" "${replica_addr}/v1/sys/storage/raft/join" -XPUT -d '{"leader_api_addr":"'"${leader_addr}"'"}'
                curl -s --cacert "${VAULT_CACERT}" "${replica_addr}/v1/sys/unseal" -XPUT -d '{"key":"'"${unseal_key}"'"}'
                echo "${replica_name} joined and initialized"
              }
              for i in $(seq $(($replicas - 1))) ; do
                join_replica $i;
              done

              # Restart pods to enable metrics
              kubectl delete pod -l app="${vault_name}"
          env:
            - name: VAULT_CACERT
              value: "/etc/tls/ca.crt"
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: unsealer
          image: alpine
          command:
            - /bin/sh
            - -c
            - |
              set -e

              vault_addr="${VAULT_ADDR:-"https://127.0.0.1:8200"}";

              # Sleep if no unseal key provided
              if [ -z "${UNSEAL_KEY}" ]; then
                echo "No unseal key provided, going to sleep";
                while true; do sleep 86400; done
              fi

              apk -q add curl jq;

              # Wait for vault api and sleep if not initialized
              until curl -s --cacert "${VAULT_CACERT}" "${vault_addr}/v1/sys/init"; do
                echo 'vault not ready, sleeping for 3 seconds';
                sleep 3;
              done;
              initialized=$(curl -s --cacert "${VAULT_CACERT}" "${vault_addr}/v1/sys/init" | jq '.initialized');
              if [ "${initialized}" = "false" ];then
                echo "vault is not initialized, going to sleep";
                while true; do sleep 86400; done
              fi

              # Unseal and sleep
              curl -s --cacert "${VAULT_CACERT}" "${vault_addr}/v1/sys/unseal" \
                -XPUT -d '{"key":"'"${UNSEAL_KEY}"'"}' \
                | jq .sealed \
                | grep -q "^false$";
              echo "vault unsealed, going to sleep";
              while true; do sleep 86400; done
          env:
            - name: VAULT_CACERT
              value: "/etc/tls/ca.crt"
            - name: UNSEAL_KEY
              valueFrom:
                secretKeyRef:
                  name: vault
                  key: unseal-key
                  optional: true
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: vault
          image: vault:1.2.3
          command:
            - /usr/bin/dumb-init
            - --
            - vault
            - server
            - -config=/vault/config
          ports:
            - containerPort: 8200
            - containerPort: 8201
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
            - name: storage
              mountPath: /vault/storage
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /etc/ssl/certs
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 100
            allowPrivilegeEscalation: false
        - name: metrics
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
        - name: reloader
          image: alpine
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
          command:
            - /bin/sh
            - -c
            - |
              echo '#!/bin/sh
              if [ "$#" -eq 3 ] && [ "$3" == "..data" ]; then
                  echo "[" $(date -uIseconds) "] config seems to have changed, reloading ..."
                  vault_pid=$(pgrep vault)
                  kill -HUP "${vault_pid}"
              fi' > /reload && chmod +x /reload && inotifyd /reload /etc/tls:y
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tls
          secret:
            secretName: vault-tls
            defaultMode: 0400
        - name: vault-config
          emptyDir: {}
        - name: nginx-config
          emptyDir: {}
        - name: ssl-certs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
