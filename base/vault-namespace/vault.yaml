apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
---
# Placeholder to be patched by the initializer
apiVersion: v1
kind: Secret
metadata:
  name: vault
---
# For use by vault clients
apiVersion: v1
kind: Service
metadata:
  name: vault
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
    - port: 8200
      name: public-api
---
# For internal cluster member communication
apiVersion: v1
kind: Service
metadata:
  name: vault-cluster
  labels:
    app: vault
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    app: vault
  ports:
    - port: 8200
      name: public-api
    - port: 8201
      name: members-internal-api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
spec:
  serviceName: vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /__/metrics
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: vault
      shareProcessNamespace: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - vault
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
      initContainers:
        # Install ca cert as a root CA
        - name: ca
          image: alpine
          command:
            - sh
            - -c
            - |
              set -e
              apk add --update ca-certificates
              cp /etc/tls/ca.crt /usr/local/share/ca-certificates/vault-ca.crt
              update-ca-certificates
              cp /etc/ssl/certs/* /ssl-certs
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /ssl-certs
        # Write vault config to file
        - name: vault-config
          image: alpine
          command:
            - sh
            - -c
            - echo "$VAULT_CONFIG" > /vault/config/config.hcl
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_CONFIG
              value: |
                listener "tcp" {
                  address         = "0.0.0.0:8200"
                  cluster_address = "0.0.0.0:8201"
                  tls_key_file    = "/etc/tls/tls.key"
                  tls_cert_file   = "/etc/tls/tls.crt"
                  telemetry {
                    unauthenticated_metrics_access = true
                  }
                }

                storage "raft" {
                  path    = "/vault/storage"
                  node_id = "$(POD_NAME)"
                }

                telemetry {
                  prometheus_retention_time = "90s",
                  disable_hostname = true
                }

                api_addr      = "https://$(POD_NAME).vault.$(POD_NAMESPACE):8200"
                cluster_addr  = "https://$(POD_NAME).vault-cluster.$(POD_NAMESPACE):8201"
                disable_mlock = true
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
      containers:
        - name: initializer
          image: quay.io/utilitywarehouse/vault-toolkit
          args:
            - initializer
          env:
            - name: VAULT_CACERT
              value: "/etc/tls/ca.crt"
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: unsealer
          image: quay.io/utilitywarehouse/vault-toolkit
          args:
            - unsealer
          env:
            - name: VAULT_CACERT
              value: "/etc/tls/ca.crt"
            - name: UNSEAL_KEY
              valueFrom:
                secretKeyRef:
                  name: vault
                  key: unseal-key
                  optional: true
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: vault
          image: vault:1.3.2
          livenessProbe:
            # Alive if Vault is uninitialized or unsealed and active/standby
            httpGet:
              path: /v1/sys/health?standbyok=true&uninitcode=204
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            # Ready if Vault is initialized, unsealed and active/standby
            httpGet:
              path: /v1/sys/health?standbyok=true
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
          command:
            - /usr/bin/dumb-init
            - --
            - vault
            - server
            - -config=/vault/config
          ports:
            - containerPort: 8200
            - containerPort: 8201
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
            - name: storage
              mountPath: /vault/storage
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /etc/ssl/certs
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 100
            allowPrivilegeEscalation: false
        - name: metrics
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
        - name: reloader
          image: alpine
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
          command:
            - /bin/sh
            - -c
            - |
              echo '#!/bin/sh
              if [ "$#" -eq 3 ] && [ "$3" == "..data" ]; then
                  echo "[" $(date -uIseconds) "] config seems to have changed, reloading ..."
                  vault_pid=$(pgrep vault)
                  kill -HUP "${vault_pid}"
              fi' > /reload && chmod +x /reload && inotifyd /reload /etc/tls:y
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tls
          secret:
            secretName: vault-tls
            defaultMode: 0400
        - name: vault-config
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: ssl-certs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
