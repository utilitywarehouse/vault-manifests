# This SA is used by vault to talk to the kube api and verify application's SAs
# trying to get secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-authenticator
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  labels:
    app: vault
spec:
  clusterIP: None
  selector:
    app: vault
  ports:
    - port: 8200
      name: public-api
    - port: 8201
      name: members-internal-api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
spec:
  serviceName: vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /__/metrics
        prometheus.io/port: '8080'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - vault
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
      initContainers:
        # Install ca cert as a root CA
        - name: ca
          image: alpine
          command:
            - sh
            - -c
            - |
              set -e
              apk add --update ca-certificates
              cp /etc/tls/ca.crt /usr/local/share/ca-certificates/vault-ca.crt
              update-ca-certificates
              cp /etc/ssl/certs/* /ssl-certs
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /ssl-certs
        # Write config to file
        - name: config
          image: alpine
          command:
            - sh
            - -c
            - echo "$VAULT_CONFIG" > /vault/config/config.hcl
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_CONFIG
              value: |
                listener "tcp" {
                  address         = "0.0.0.0:8200"
                  cluster_address = "0.0.0.0:8201"
                  tls_key_file    = "/etc/tls/tls.key"
                  tls_cert_file   = "/etc/tls/tls.crt"
                }

                storage "raft" {
                  path    = "/vault/storage"
                  node_id = "$(POD_NAME)"
                }

                telemetry {
                  prometheus_retention_time = "90s",
                  disable_hostname = true
                }

                api_addr      = "https://$(POD_NAME).vault.$(POD_NAMESPACE):8200"
                cluster_addr  = "https://$(POD_NAME).vault.$(POD_NAMESPACE):8201"
                disable_mlock = true
          volumeMounts:
            - name: config
              mountPath: /vault/config
        - name: nginx-config
          image: alpine
          command:
            - sh
            - -c
            - echo "$NGINX_CONFIG" > /etc/nginx/conf.d/default.conf
          env:
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-token
                  key: token
            - name: NGINX_CONFIG
              value: |
                  server {
                      listen       8080;
                      server_name  localhost;

                      location /__/metrics {
                          proxy_pass https://127.0.0.1:8200/v1/sys/metrics?format=prometheus;
                          proxy_set_header X-Vault-Token $(VAULT_TOKEN);
                          proxy_ssl_verify off;
                      }
                  }
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
      containers:
        - name: unsealer
          image: alpine
          command:
            - /bin/sh
            - -c
            - |
              set -e

              if [ -n "${UNSEAL_KEY}" ]; then
                apk add curl jq
                sleep 7
                curl --cacert /etc/tls/ca.crt https://127.0.0.1:8200/v1/sys/unseal -XPUT -d"{\"key\":\"${UNSEAL_KEY}\"}" \
                | jq .sealed \
                | grep -q "^false$"
              fi
              while true; do sleep 86400; done
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: vault
          image: vault:1.2.3
          command:
            - /usr/bin/dumb-init
            - --
            - vault
            - server
            - -config=/vault/config
          ports:
            - containerPort: 8200
            - containerPort: 8201
          volumeMounts:
            - name: config
              mountPath: /vault/config
            - name: storage
              mountPath: /vault/storage
            - name: tls
              mountPath: /etc/tls
            - name: ssl-certs
              mountPath: /etc/ssl/certs
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 100
            allowPrivilegeEscalation: false
        - name: metrics
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tls
          secret:
            secretName: vault-tls
            defaultMode: 0400
        - name: config
          emptyDir: {}
        - name: nginx-config
          emptyDir: {}
        - name: ssl-certs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
